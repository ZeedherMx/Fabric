"""
Single Agent Chatbot Template
"""

SINGLE_AGENT_MAIN = '''"""
{{ config.name }} - Single Agent Chatbot
Generated by Chatbot Factory
"""
import os
import asyncio
from typing import Dict, Any, List
import gradio as gr
from fastapi import FastAPI
from langchain_groq import ChatGroq
from langchain_core.messages import HumanMessage, SystemMessage
{% if config.enable_rag %}
from langchain_community.vectorstores import Chroma
from langchain_community.embeddings import HuggingFaceEmbeddings
{% endif %}
{% if config.enable_function_calling %}
from langchain_core.tools import tool
{% endif %}

class {{ config.name.replace(' ', '').replace('-', '') }}:
    """{{ config.description }}"""
    
    def __init__(self):
        self.llm = ChatGroq(
            groq_api_key=os.getenv("GROQ_API_KEY"),
            model_name="{{ model_name }}",
            temperature={{ temperature }}
        )
        {% if config.enable_rag %}
        self.setup_rag()
        {% endif %}
        {% if config.enable_memory %}
        self.memory = {}
        {% endif %}
        {% if config.enable_function_calling %}
        self.tools = self.setup_tools()
        {% endif %}
    
    {% if config.enable_rag %}
    def setup_rag(self):
        """Setup RAG components"""
        self.embeddings = HuggingFaceEmbeddings()
        self.vectorstore = Chroma(
            persist_directory="./data/chroma",
            embedding_function=self.embeddings
        )
    {% endif %}
    
    {% if config.enable_function_calling %}
    def setup_tools(self):
        """Setup available tools"""
        tools = []
        
        {% for integration in config.integrations %}
        {% if integration.type == 'rest_api' %}
        @tool
        def {{ integration.name.lower().replace(' ', '_') }}_api(query: str) -> str:
            """{{ integration.description or 'API integration' }}"""
            import requests
            try:
                response = requests.get("{{ integration.url }}", params={"q": query})
                return response.json()
            except Exception as e:
                return f"API error: {str(e)}"
        
        tools.append({{ integration.name.lower().replace(' ', '_') }}_api)
        {% endif %}
        {% endfor %}
        
        return tools
    {% endif %}
    
    async def chat(self, message: str, history: List = None, user_id: str = "default") -> str:
        """Main chat method"""
        try:
            # Build system prompt
            system_prompt = f"""You are {{ config.name }}, {{ config.description }}.
            
Personality: {{ config.personality_traits | join(', ') }}
Tone: {{ config.tone }}
Expertise: {{ config.domain_expertise | join(', ') }}

Be helpful, accurate, and maintain your personality."""

            {% if config.enable_rag %}
            # RAG context
            relevant_docs = self.vectorstore.similarity_search(message, k=3)
            context = "\\n".join([doc.page_content for doc in relevant_docs])
            if context:
                system_prompt += f"\\n\\nRelevant context:\\n{context}"
            {% endif %}
            
            {% if config.enable_memory %}
            # Memory management
            if user_id not in self.memory:
                self.memory[user_id] = []
            
            # Add user message to memory
            self.memory[user_id].append({"role": "user", "content": message})
            
            # Keep last 10 messages
            recent_history = self.memory[user_id][-10:]
            {% endif %}
            
            # Build messages
            messages = [SystemMessage(content=system_prompt)]
            
            {% if config.enable_memory %}
            # Add conversation history
            for msg in recent_history[:-1]:  # Exclude current message
                if msg["role"] == "user":
                    messages.append(HumanMessage(content=msg["content"]))
                else:
                    messages.append(SystemMessage(content=msg["content"]))
            {% endif %}
            
            messages.append(HumanMessage(content=message))
            
            {% if config.enable_function_calling %}
            # Use LLM with tools
            llm_with_tools = self.llm.bind_tools(self.tools)
            response = await llm_with_tools.ainvoke(messages)
            {% else %}
            # Use LLM without tools
            response = await self.llm.ainvoke(messages)
            {% endif %}
            
            bot_response = response.content
            
            {% if config.enable_memory %}
            # Add bot response to memory
            self.memory[user_id].append({"role": "assistant", "content": bot_response})
            {% endif %}
            
            return bot_response
            
        except Exception as e:
            return f"I apologize, but I encountered an error: {str(e)}"

# Initialize chatbot
chatbot = {{ config.name.replace(' ', '').replace('-', '') }}()

# Gradio interface
def chat_interface(message, history):
    """Gradio chat interface"""
    return asyncio.run(chatbot.chat(message, history))

# Create Gradio app
demo = gr.ChatInterface(
    fn=chat_interface,
    title="{{ config.name }}",
    description="{{ config.description }}",
    theme="{{ config.ui_theme }}",
    {% if config.logo_url %}
    avatar_images=[None, "{{ config.logo_url }}"],
    {% endif %}
)

# FastAPI for API access
app = FastAPI(title="{{ config.name }} API")

@app.post("/chat")
async def api_chat(message: str, user_id: str = "default"):
    """API endpoint"""
    response = await chatbot.chat(message, user_id=user_id)
    return {"response": response}

@app.get("/health")
async def health():
    """Health check"""
    return {"status": "healthy"}

if __name__ == "__main__":
    import uvicorn
    
    # Launch Gradio
    demo.queue().launch(
        server_name="0.0.0.0",
        server_port={{ config.port }},
        share=False
    )
'''

MULTI_AGENT_MAIN = '''"""
{{ config.name }} - Multi-Agent Chatbot System
Generated by Chatbot Factory
"""
import os
import asyncio
from typing import Dict, Any, List
import gradio as gr
from fastapi import FastAPI
from langchain_groq import ChatGroq
from langgraph import StateGraph, END

# Import agents
from agents.coordinator import CoordinatorAgent
{% for agent in config.agents %}
from agents.{{ agent.name }} import {{ agent.name.title().replace('_', '') }}Agent
{% endfor %}

class {{ config.name.replace(' ', '').replace('-', '') }}System:
    """Multi-agent chatbot system"""
    
    def __init__(self):
        # Initialize specialized agents
        self.agents = {
            {% for agent in config.agents %}
            "{{ agent.name }}": {{ agent.name.title().replace('_', '') }}Agent(),
            {% endfor %}
        }
        
        # Initialize coordinator
        self.coordinator = CoordinatorAgent(self.agents)
        
        {% if config.enable_memory %}
        self.conversation_memory = {}
        {% endif %}
    
    async def chat(self, message: str, history: List = None, user_id: str = "default") -> str:
        """Main chat interface"""
        try:
            {% if config.enable_memory %}
            # Memory management
            if user_id not in self.conversation_memory:
                self.conversation_memory[user_id] = []
            
            self.conversation_memory[user_id].append({"role": "user", "content": message})
            {% endif %}
            
            # Route through coordinator
            response = await self.coordinator.coordinate(message)
            
            {% if config.enable_memory %}
            # Store response
            self.conversation_memory[user_id].append({"role": "assistant", "content": response})
            {% endif %}
            
            return response
            
        except Exception as e:
            return f"System error: {str(e)}"

# Initialize system
chatbot_system = {{ config.name.replace(' ', '').replace('-', '') }}System()

# Gradio interface
def chat_interface(message, history):
    """Gradio chat interface"""
    return asyncio.run(chatbot_system.chat(message, history))

# Create Gradio app
demo = gr.ChatInterface(
    fn=chat_interface,
    title="{{ config.name }} - Multi-Agent System",
    description="{{ config.description }}",
    theme="{{ config.ui_theme }}",
    {% if config.logo_url %}
    avatar_images=[None, "{{ config.logo_url }}"],
    {% endif %}
)

# FastAPI for API access
app = FastAPI(title="{{ config.name }} Multi-Agent API")

@app.post("/chat")
async def api_chat(message: str, user_id: str = "default"):
    """API endpoint"""
    response = await chatbot_system.chat(message, user_id=user_id)
    return {"response": response}

@app.get("/agents")
async def list_agents():
    """List available agents"""
    return {"agents": list(chatbot_system.agents.keys())}

@app.get("/health")
async def health():
    """Health check"""
    return {"status": "healthy", "agents": len(chatbot_system.agents)}

if __name__ == "__main__":
    import uvicorn
    
    # Launch Gradio
    demo.queue().launch(
        server_name="0.0.0.0",
        server_port={{ config.port }},
        share=False
    )
'''

DOCKERFILE_TEMPLATE = '''FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \\
    build-essential \\
    curl \\
    && rm -rf /var/lib/apt/lists/*

# Copy requirements
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application
COPY . .

# Create data directory
RUN mkdir -p data

# Expose port
EXPOSE {{ config.port }}

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \\
    CMD curl -f http://localhost:{{ config.port }}/health || exit 1

# Run application
CMD ["python", "main.py"]
'''

DOCKER_COMPOSE_TEMPLATE = '''version: '3.8'

services:
  {{ config.name.lower().replace(' ', '-') }}:
    build: .
    ports:
      - "{{ config.port }}:{{ config.port }}"
    environment:
      - GROQ_API_KEY=${GROQ_API_KEY}
      - OPIK_API_KEY=${OPIK_API_KEY}
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:{{ config.port }}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Add database service
  # postgres:
  #   image: postgres:15
  #   environment:
  #     POSTGRES_DB: chatbot
  #     POSTGRES_USER: chatbot
  #     POSTGRES_PASSWORD: password
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"

# volumes:
#   postgres_data:
'''
